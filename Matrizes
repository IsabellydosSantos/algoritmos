Matrizes em Python - Resumo Completo

O que é uma Matriz?

Uma matriz é uma estrutura de dados bidimensional organizada em linhas e colunas. Em Python, não existe um tipo nativo "matriz", mas podemos representá-las usando:

1. Listas de listas (Python puro)
2. Arrays do NumPy (biblioteca especializada)

1. Matrizes com Listas de Listas

Definição Básica

```python
# Criando uma matriz 2x3 usando listas
matriz = [
    [1, 2, 3],    # Primeira linha
    [4, 5, 6]     # Segunda linha
]

print("Matriz 2x3:")
for linha in matriz:
    print(linha)
```

Funções e Operações Básicas

```python
def criar_matriz(linhas, colunas, valor=0):
    """Cria uma matriz com dimensões específicas"""
    return [[valor for _ in range(colunas)] for _ in range(linhas)]

def imprimir_matriz(matriz):
    """Imprime a matriz de forma formatada"""
    for linha in matriz:
        print(linha)

def soma_matrizes(A, B):
    """Soma duas matrizes de mesma dimensão"""
    if len(A) != len(B) or len(A[0]) != len(B[0]):
        raise ValueError("Matrizes devem ter mesma dimensão")
    
    linhas = len(A)
    colunas = len(A[0])
    resultado = criar_matriz(linhas, colunas)
    
    for i in range(linhas):
        for j in range(colunas):
            resultado[i][j] = A[i][j] + B[i][j]
    
    return resultado

# Exemplo de uso
matriz_A = [[1, 2], [3, 4]]
matriz_B = [[5, 6], [7, 8]]

print("Matriz A:")
imprimir_matriz(matriz_A)

print("\nMatriz B:")
imprimir_matriz(matriz_B)

print("\nSoma A + B:")
resultado_soma = soma_matrizes(matriz_A, matriz_B)
imprimir_matriz(resultado_soma)
```

2. Matrizes com NumPy

O NumPy é a biblioteca mais popular para trabalhar com matrizes e cálculos numéricos em Python.

Instalação

```bash
pip install numpy
```

Arrays NumPy - Conceitos Fundamentais

```python
import numpy as np

# Criando arrays (matrizes)
# Array 1D (vetor)
vetor = np.array([1, 2, 3, 4, 5])
print("Vetor:", vetor)
print("Dimensões:", vetor.shape)
print("Tipo:", vetor.dtype)

# Array 2D (matriz)
matriz = np.array([[1, 2, 3], [4, 5, 6]])
print("\nMatriz 2x3:")
print(matriz)
print("Dimensões:", matriz.shape)
print("Número de dimensões:", matriz.ndim)
```

Funções Principais do NumPy

Criação de Arrays

```python
import numpy as np

# Diferentes formas de criar arrays
zeros = np.zeros((3, 3))          # Matriz 3x3 de zeros
uns = np.ones((2, 4))             # Matriz 2x4 de uns
identidade = np.eye(3)            # Matriz identidade 3x3
aleatoria = np.random.random((2, 2))  # Matriz com valores aleatórios
intervalo = np.arange(0, 10, 2)   # Array com valores de 0 a 10, passo 2
linear = np.linspace(0, 1, 5)     # 5 valores igualmente espaçados entre 0 e 1

print("Zeros 3x3:")
print(zeros)
print("\nMatriz identidade 3x3:")
print(identidade)
```

Operações com Matrizes

```python
import numpy as np

# Criando matrizes de exemplo
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

print("Matriz A:")
print(A)
print("\nMatriz B:")
print(B)

# Operações básicas
print("\nSoma A + B:")
print(A + B)  # ou np.add(A, B)

print("\nSubtração A - B:")
print(A - B)  # ou np.subtract(A, B)

print("\nMultiplicação elemento a elemento:")
print(A * B)  # ou np.multiply(A, B)

print("\nDivisão elemento a elemento:")
print(A / B)  # ou np.divide(A, B)
```

Funções Específicas do NumPy

1. np.dot() - Produto Escalar e Multiplicação de Matrizes

```python
import numpy as np

# Vetores para produto escalar
v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])

# Produto escalar
produto_escalar = np.dot(v1, v2)
print("Produto escalar v1 · v2:", produto_escalar)

# Multiplicação de matrizes
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# Multiplicação de matrizes
C = np.dot(A, B)
print("\nMultiplicação A × B:")
print(C)

# Alternativa usando o operador @ (Python 3.5+)
C_alt = A @ B
print("\nUsando operador @:")
print(C_alt)
```

2. np.linalg.inv() - Matriz Inversa

```python
import numpy as np

# Matriz quadrada
A = np.array([[4, 7], [2, 6]])
print("Matriz A:")
print(A)

# Calculando a inversa
try:
    A_inv = np.linalg.inv(A)
    print("\nMatriz inversa de A:")
    print(A_inv)
    
    # Verificando: A × A⁻¹ deve ser a matriz identidade
    identidade = np.dot(A, A_inv)
    print("\nVerificação (A × A⁻¹):")
    print(identidade)
    
except np.linalg.LinAlgError:
    print("Matriz não é invertível")
```

3. np.linalg.det() - Determinante

```python
import numpy as np

A = np.array([[1, 2], [3, 4]])
determinante = np.linalg.det(A)
print("Determinante de A:", determinante)
```

4. np.transpose() ou .T - Transposta

```python
import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
print("Matriz A:")
print(A)

A_transposta = np.transpose(A)  # ou A.T
print("\nMatriz transposta de A:")
print(A_transposta)
```

5. np.linalg.solve() - Resolução de Sistemas Lineares

```python
import numpy as np

# Sistema: 3x + y = 9
#          x + 2y = 8
coeficientes = np.array([[3, 1], [1, 2]])
constantes = np.array([9, 8])

# Resolvendo o sistema
solucao = np.linalg.solve(coeficientes, constantes)
print("Solução do sistema:")
print(f"x = {solucao[0]}, y = {solucao[1]}")

# Verificação
verificacao = np.dot(coeficientes, solucao)
print("Verificação:", verificacao)
```

Atributos Importantes de Arrays NumPy

```python
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

print("Array:")
print(arr)
print("Shape (dimensões):", arr.shape)      # (2, 3) - 2 linhas, 3 colunas
print("Número de dimensões:", arr.ndim)     # 2
print("Número total de elementos:", arr.size) # 6
print("Tipo dos elementos:", arr.dtype)     # int64
print("Tamanho em bytes de cada elemento:", arr.itemsize)
print("Buffer de dados:", arr.data)
```

Vantagens do NumPy sobre Listas Python

1. Performance: Operações vetorizadas são muito mais rápidas
2. Memória: Arrays NumPy são mais eficientes em uso de memória
3. Funcionalidades: Oferece funções matemáticas avançadas
4. Legibilidade: Código mais limpo e expressivo

Resumo das Principais Funções NumPy

Função Descrição
np.array() Cria um array
np.zeros() Array preenchido com zeros
np.ones() Array preenchido com uns
np.eye() Matriz identidade
np.dot() Produto escalar/multiplicação de matrizes
np.linalg.inv() Matriz inversa
np.linalg.det() Determinante
np.transpose() Matriz transposta
np.linalg.solve() Resolve sistema linear
np.sum() Soma dos elementos
np.mean() Média dos elementos
np.reshape() Redimensiona o array

Este resumo cobre os conceitos fundamentais de matrizes em Python, desde a implementação básica com listas até o uso avançado com NumPy, incluindo as principais funções e operações matriciais.
